#!/bin/sh

# Inside parse()
# shellcheck disable=SC2004

SLEEP_INTERVAL=3

main() {
  parse "$@"
  eval "set -- $REST"

  case "$1" in
    "start")
      start
      ;;
    "stop")
      stop
      ;;
    "down")
      down
      ;;
    "restart")
      restart
      ;;
    "status")
      status
      ;;
    *)
      usage
      exit 1
      ;;
  esac

  # "status --with-status" is redundant
  if [ "$WITH_STATUS" ] && [ "$1" != "status" ]; then
    echo
    status
  fi
}

start() {
  if "$(started)"; then
    echo "PulseAudio has already started"
    return 0
  fi

  if [ "$(systemctl --user is-active pulseaudio)" != "active" ]; then
    systemctl --user start pulseaudio
  fi

  echo "Wait $SLEEP_INTERVAL seconds for PulseAudio to start"
  sleep "$SLEEP_INTERVAL"

  if [ "$(pgrep pulseaudio)" = "" ]; then
    echo "ERROR: Failed to start: PulseAudio process is not found" >&2
    exit 1
  fi

  if [ "$(systemctl --user is-active pulseaudio)" != "active" ]; then
    echo "ERROR: Failed to start: PulseAudio daemon is inactive" >&2
    exit 1
  fi

  if [ "$(systemctl --user is-active pulseaudio.socket)" != "active" ]; then
    echo "ERROR: Failed to start: PulseAudio socket is inactive" >&2
    exit 1
  fi
}

started() {
  if
  [ "$(pgrep pulseaudio)" != "" ] ||
  [ "$(systemctl --user is-active pulseaudio)" = "active" ] ||
  [ "$(systemctl --user is-active pulseaudio.socket)" = "active" ]; then
    echo true
  else
    echo false
  fi
}

stop() {
  if "$(stopped)"; then
    echo "PulseAudio has already stopped"
    return 0
  fi

  if [ "$(pgrep pulseaudio)" != "" ]; then
    killall pulseaudio
  fi

  if [ "$(systemctl --user is-active pulseaudio)" = "active" ]; then
    systemctl --user stop pulseaudio
  fi

  if [ "$(systemctl --user is-active pulseaudio.socket)" = "active" ]; then
    systemctl --user stop pulseaudio.socket
  fi

  echo "Wait $SLEEP_INTERVAL seconds for PulseAudio to be terminated completely"
  sleep "$SLEEP_INTERVAL"

  if [ "$(pgrep pulseaudio)" != "" ]; then
    echo "ERROR: Failed to stop: PulseAudio process is still alive" >&2
    exit 1
  fi

  if [ "$(systemctl --user is-active pulseaudio)" = "active" ]; then
    echo "ERROR: Failed to stop: PulseAudio daemon is still active" >&2
    exit 1
  fi

  if [ "$(systemctl --user is-active pulseaudio.socket)" = "active" ]; then
    echo "ERROR: Failed to stop: PulseAudio socket is still active" >&2
    exit 1
  fi
}

stopped() {
  if
  [ "$(pgrep pulseaudio)" = "" ] ||
  [ "$(systemctl --user is-active pulseaudio)" != "active" ] ||
  [ "$(systemctl --user is-active pulseaudio.socket)" != "active" ]; then
    echo true
  else
    echo false
  fi
}

down() {
  if ! "$(stopped)"; then
    stop
  fi

  if "$(is_down)"; then
    echo "PulseAudio has already been masked"
    return 0
  fi

  if [ "$(systemctl --user is-enabled pulseaudio)" != "masked" ]; then
    systemctl --user mask pulseaudio
  fi

  if [ "$(systemctl --user is-enabled pulseaudio.socket)" != "masked" ]; then
    systemctl --user mask pulseaudio.socket
  fi

  if [ "$(systemctl --user is-enabled pulseaudio)" != "masked" ]; then
    echo "ERROR: Failed to down: PulseAudio daemon is still enabled" >&2
    exit 1
  fi

  if [ "$(systemctl --user is-enabled pulseaudio.socket)" != "masked" ]; then
    echo "ERROR: Failed to down: PulseAudio socket is still enabled" >&2
    exit 1
  fi
}

is_down() {
  if
  [ "$(systemctl --user is-enabled pulseaudio)" = "masked" ] &&
  [ "$(systemctl --user is-enabled pulseaudio.socket)" = "masked" ]; then
    echo true
  else
    echo false
  fi
}

restart() {
  stop
  start
}

status() {
  if [ "$(pgrep pulseaudio)" != "" ]; then
    echo "PulseAudio process ID:"
    pgrep pulseaudio
  else
    echo "PulseAudio Process ID is not found"
  fi
  echo

  systemctl --user status pulseaudio --no-pager
  echo

  systemctl --user status pulseaudio.socket --no-pager
}

# gengetoptions embed --overwrite <FILE>
# @getoptions
parser_definition() {
  setup REST help:usage -- "Usage: [options]... [arguments]..." ''

  msg -- 'Arguments:'
  msg -- '	OPERATION'
  msg -- '		start	Start the PulseAudio daemon'
  msg -- '		stop	Stop the PulseAudio daemon'
  msg -- '		down	Keep the PulseAudio daemon from starting automatically when the system boots'
  msg -- '		restart	Restart the PulseAudio daemon'
  msg -- '		status	Show the PulseAudio process and daemon status'
  msg

  msg -- 'Options:'
  flag WITH_STATUS    --status --with-status -- "Show status after an operation ends"
  disp :usage      -h --help                 -- "Show this help message and exit"
  disp VERSION        --version              -- "Show the current version"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
WITH_STATUS=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--status'|'--with-status')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        WITH_STATUS="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: [options]... [arguments]...

Arguments:
  OPERATION
    start	Start the PulseAudio daemon
    stop	Stop the PulseAudio daemon
    down	Keep the PulseAudio daemon from starting automatically when the system boots
    restart	Restart the PulseAudio daemon
    status	Show the PulseAudio process and daemon status

Options:
      --status, --with-status Show status after an operation ends
  -h, --help                  Show this help message and exit
      --version               Show the current version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
